<?xml version="1.0" encoding="UTF-8"?>
<documentation title="ATDOC example project" name="example" include-slot-definitions-p="yes"><package name="example/app" id="example/app"><documentation-string>This is docstring for the <b>example/app</b> package.<break/>
                   The package contains a function which does it's job by
                   applying transformation to the first and second arguments:<break/>                   <aboutfun>foo</aboutfun><break/>
                   When you mention a function like that, it is included into
                   the package description and removed from the                   "Other functions..." section</documentation-string><external-symbols><function-definition id="example/app__fun__foo" name="foo" package="example/app"><lambda-list><elt>first</elt><elt>&amp;key</elt><elt>(other 100500)</elt></lambda-list><documentation-string><short>This is example function.</short>   <arg arg="first">Just a first argument.</arg>   <arg arg="other">Optional keyword argument. Default is 100500.</arg>   <return>A string with first and other concatenated.</return><break/>   Internally it calls <fun id="example/utils__fun__do-the-job">example/utils:do-the-job</fun>
   to do the real job.<break/>
   Note, that the link above is broken, but Coo does not warn us when building the docs.
   Sphinx issues a warning inn such case.</documentation-string></function-definition></external-symbols><internal-symbols/></package><package name="example/class" id="example/class"><documentation-string>This package demonstrates how ATDOC displays classes and generic functions.<break/>
                   The key consept is user class:<break/>                   <aboutclass>user</aboutclass><break/>
                   It is possible to check if user has admin privileges, using this function:<break/>                   <aboutfun>is-admin</aboutfun><break/>                   Right now, <fun id="example/class__fun__is-admin">is-admin</fun> returns <code>t</code> only for objects of <class id="example/class__class__admin">admin</class>:<break/>                   <aboutclass>admin</aboutclass></documentation-string><external-symbols><class-definition id="example/class__class__admin" name="admin" package="example/class"><cpl><superclass status="EXTERNAL" id="example/class__class__user" name="user" package="example/class"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><direct-slots/><documentation-string>Admins should have additional priveleges.</documentation-string></class-definition><class-definition id="example/class__class__user" name="user" package="example/class"><cpl><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses><subclass status="EXTERNAL" id="example/class__class__non-documented-user" name="non-documented-user" package="example/class"/><subclass status="EXTERNAL" id="example/class__class__admin" name="admin" package="example/class"/></subclasses><direct-slots><slot id="example/class__slot__name" name="name" package="example/class" allocation="keyword__symbol__instance" type="STRING"><initargs><initarg id="keyword__symbol__name" name="name" package="keyword"/></initargs><readers><reader id="example/class__symbol__name" name="name" package="example/class"/></readers><documentation-string>A full username.</documentation-string></slot><slot id="example/class__slot__email" name="email" package="example/class" allocation="keyword__symbol__instance" type="STRING"><initargs><initarg id="keyword__symbol__email" name="email" package="keyword"/></initargs><readers><reader id="example/class__symbol__email" name="email" package="example/class"/></readers><documentation-string>Correct email address.</documentation-string></slot><slot id="example/class__slot__last-login-at" name="last-login-at" package="example/class" allocation="keyword__symbol__instance" type="T"><initargs/><readers><reader id="example/class__symbol__last-login-at" name="last-login-at" package="example/class"/></readers></slot></direct-slots><documentation-string>All users in the system have this class.<break/>
Last login slot is updated automatically.<break/><b>NOTE:</b> "Documented Subclasses" section contains only classes which are:</documentation-string></class-definition><class-definition id="example/class__class__non-documented-user" name="non-documented-user" package="example/class"><cpl><superclass status="EXTERNAL" id="example/class__class__user" name="user" package="example/class"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><direct-slots/></class-definition></external-symbols><internal-symbols><function-definition id="example/class__fun__is-admin" name="is-admin" package="example/class"><lambda-list><elt>user</elt></lambda-list><documentation-string>Returns t if user can modify the system.</documentation-string></function-definition><function-definition id="example/class__fun__email" name="email" package="example/class"><lambda-list><elt>object</elt></lambda-list></function-definition><function-definition id="example/class__fun__name" name="name" package="example/class"><lambda-list><elt>object</elt></lambda-list></function-definition><class-definition id="example/class__class__inner-documented-user" name="inner-documented-user" package="example/class"><cpl><superclass status="EXTERNAL" id="example/class__class__user" name="user" package="example/class"/><superclass status="EXTERNAL" name="standard-object" package="common-lisp"/><superclass status="INTERNAL" name="slot-object" package="sb-pcl"/><superclass status="EXTERNAL" name="t" package="common-lisp"/></cpl><subclasses/><direct-slots/><documentation-string>This class only to demostrate how ATDOC's docstring
collection ignores not exported classes even when they have documentation.<break/>
Also, it will not be shown in the "Documented Subclasses".Seems, "documented" in terms of ATDOC is "exported" and being the public API.</documentation-string></class-definition><function-definition id="example/class__fun__last-login-at" name="last-login-at" package="example/class"><lambda-list><elt>object</elt></lambda-list></function-definition></internal-symbols></package><package name="example/utils" id="example/utils"><documentation-string>The utils package.<break/>This package's docstring is not mention any functions via <code>aboutfun</code> or <code>aboutclass</code> tags.<break/>Hence, the only exported function <fun id="example/utils__fun__do-the-job">do-the-job</fun> will be show in a separate
section "Other functions in example/utils".</documentation-string><external-symbols><function-definition id="example/utils__fun__do-the-job" name="do-the-job" package="example/utils"><lambda-list><elt>first</elt><elt>second</elt></lambda-list><documentation-string>The function does the job.<break/>It <v>concatenates</v> first and second arguments
calling internal function concat.<break/>
On this multiline we'll check how does documentationsystem processes docstrings.</documentation-string></function-definition></external-symbols><internal-symbols><function-definition id="example/utils__fun__concat" name="concat" package="example/utils"><lambda-list><elt>first</elt><elt>second</elt></lambda-list><documentation-string>This function is not exported and should not be showed in the API reference.</documentation-string></function-definition></internal-symbols></package></documentation>